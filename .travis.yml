sudo: required
dist: trusty
services:
- docker

branches:
  only:
  - docker

env:
  global:
    - secure: "Q3GrIkqrorCRkrdhJ5q/+ueGztoikv4+4RPpyBpXE746EwetW1SCub2U6E8GMKjGEITer4yfGgsHez777CYrz8RMbDGK7qh8zL4UuhmsUPmoYJ83REGR6FL8bEX23Z/zUvshNsZColnMvwqlRcsb3PdSI2TOSjs1RoXquWi7YJFBBunpPMyJbHMNKfYLrBDWNWcGfr19APzPTvbADEK3rO6407mD/Phj1ikbbdjZAQdTufu7bVi5GtR+DQ3nRKf6Vi2iL4MCF3Vqpp3BHnk2d2gSyqR3vtTDvkpU2ItOxurg4nWMs8l2ahyvX7mab2VKb5rkEz7rSaia63AY7aV5CfVx8RE8fYc+9PLRLzShJtST1eicfih8YwccZH+6YiJW8jwZyuagQ4RB37oU6agL1Ypg//3QA2ranpLdWGDozkU0xx0yWB5oHpLjYfqBLrX7d8PCNSS2sg5ZO8u5gjviGu0aojPCkf61JiAy8jc1GJsIOEzxUS9QmwmsU2wdVyK3HHrJ2kY8M7FIWvbUcwWYYJatDt2DGfFdyviX3DcL3PMgSgORkyJBd+wczf0NiL/55HJJ+6G9orJkiBdIYn8yCtuhDsEkBglwof8rUVYmvkWScJ2FZm2gb9ElEDvLm0lntEEalZmVsmwoHZbY1hweu316U/hFHErLFBfGqbYqCmM="
    - secure: "bV0pt5VW2tmtTjV5CC4Fs2b65dD9GD82sZVhAPID/pqKILpo/JIna8v5OWubmuAekqMUjxkPrvyGigjwpwd2frw+Tln+LtL9VDxGrPza5b6PfzMp5IXS69C5wqHKzQWFwkdAt0NK0jhi7xC4E/laWQYsiS4Q/sJtrouNg4vPOy6n6L8sBAlIiRlJIGtGB6JuxlG5UHCSorGCiL21at4OvonFMrI08jvuzQZb+0HpHSBRECc3C9vhDUrF9PtpzKMJ8ZW7BgD2QoXYzzV8VA3w1Zwms75diKwPJoL6Ixg7MPwsQJnXB6a1ESxjdYyK7U4grdQHVlGwHn/qMI/TLFSQoTo8S44SdphtI1BguKEq/NqjCchQRy6q8Sdpey5HljGISC76i/zU0hW6iJytXJjrhfGtEYfPHCivSrhP+ZSXAr+C2zLg+Jdd1AGxounfiS3DCOBqCG98+5z06c2Pz1CfClKQnlurouu/p9f9md+vhYlevcnqbo7EuhZ+6P0Y2lUP4JoEBjROmO/oj357LnZuW6pGRmb1uiXrOjPJGfaOnN9m/ihtDCyq7NGlpGuEkiLWP2tvAeqkFBepJJgP2FNw0SgrFCloA5GkQCT6zhXUNtuo2y09mPuSaiIRd7DL5KpFQC355HG6QcP4Au7vUTlSYQMT2Lkby+6gCZgnuqg1ZDU="
    - secure: "1kQCBywUanxvEM5Bvve6RTcpTyVW11CFXdRIyT5D4+V08zVm564bLBIqE56icizj6HII1r7VY5kxwk5focaqKAJWZ2wle9qLquxPGruJPwcW19MP/UT2wW3zFu03vnhHeQdV+ne7M0Fv+2X3GSRY7txevDGsX82VbMSBT31rxrAYrcH25tOqHYW9fu7J/czUGLz+C20fTJ/9OUNEGN2QzGB9VSx1OOGt+Ro0gmLbjwRULFoEaCoRL1DpGkgqXt1JXOb+KR5Ij5oJaCJUdizV91eb8z9Bpvg5sCZt9IZXY34IENxN1hroKPsxEPv8fkQ1dLosyP0qPWzrPpXKfBfTWk8UExG8Tl+l4kvk1xVBRLezW1cZkNGwBqi+KZON/yvQY2dRBf2WaB391RjH/KamTkdz2It9FvR0ksgqGS/lmivGYJ4LdazXZbTOUe4dOpN43xSeEH37wB4Xb+NTuDwJ7rKDb1NOXEupxgM8cAITpP7Gtz3R5Hk0pA3FWLWOXY1pv5eLU8DaSQnhKzB2RypLLB7asEehCZid9OcHZ5rHsMcJI3REDuRWJQIW3uyx0W77UQtx8VsDgA6GJFsT8CY4OQJZfdrCGDsaJWZIDuSa/5ZeJ3ucDSSVbzvi88d77CC7F3ecqFxyTiaeDJ7dUZFbJs5XyYvjX/hKEzHY5cWMzgw="
    - COMMIT=${TRAVIS_COMMIT::8}

matrix:
  include:
  # Static Analysis
  - env: IMAGE=fedora:rawhide BASE=fedora NAME=fedora.static-analysis REPO=claudioandre/spidermonkey STATIC=analysis

  # Ubuntu
  - env: IMAGE=ubuntu:18.04 BASE=debian NAME=SM52-gcc.ubuntu-lts   REPO=claudioandre/spidermonkey
  - env: IMAGE=ubuntu:devel BASE=debian NAME=SM52-gcc.ubuntu-dev   REPO=claudioandre/spidermonkey DEV=devel

  # Fedora
  - env: IMAGE=fedora:rawhide BASE=fedora NAME=SM52-gcc.fedora-dev REPO=claudioandre/spidermonkey DEV=devel
  - env: IMAGE=fedora:rawhide BASE=fedora NAME=SM60-gcc.fedora-dev REPO=claudioandre/spidermonkey DEV=devel STATIC=moz60

  - env: IMAGE=fedora:rawhide BASE=fedora NAME=fedora.dev          REPO=claudioandre/settings     DEV=devel STATIC=settings
  - env: IMAGE=fedora:rawhide BASE=fedora NAME=fedora.flatpak      REPO=claudioandre/settings     DEV=devel STATIC=flatpak

  # Debug Build
  - env: IMAGE=fedora:rawhide BASE=fedora NAME=SM52-debug-gcc.fedora-dev REPO=claudioandre/spidermonkey DEV=devel BUILD_OPTS="--enable-debug"

  # Very heavy tasks. Run it in 2 phases.
  ### - env: IMAGE=resin/armv7hf-fedora BASE=fedora NAME=fedora.armv7hf.gcc0 REPO=claudioandre/spidermonkey EMU_EXTRA=yes
  ### - env: IMAGE=claudioandre/spidermonkey:fedora.armv7hf.gcc0 BASE=fedora NAME=fedora.armv7hf.gcc REPO=claudioandre/spidermonkey EMU_EXTRA=yes

script:
  - cd docker
  - export log_message=$(git log -n 1)

  - 'if [[ "$TRAVIS_EVENT_TYPE" != "cron" && "$log_message" == *"[filter images]"* && "$log_message" != *"[$NAME]"* ]]; then
       echo -e "\n*** NOTHING TO DO ***\n";
       exit 0;
     else
       echo -e "\n*** BUILDING ***\n";
     fi'

  # Register QEMU
  - 'if [[ $EMU_EXTRA == "yes" ]]; then
       docker run --rm --privileged multiarch/qemu-user-static:register --reset;
     fi'

  # For a heavy build, add -m 500M --oom-kill-disable
  # -------------------------------------------------
  - 'docker run --name $NAME -v $(pwd):/saved -v $(pwd)/test-ci.sh:/test-ci.sh
        -e BASE=$BASE -e OS=$IMAGE -e BUILD_OPTS=$BUILD_OPTS -e DEV=$DEV -e CC=gcc -e STATIC=$STATIC $IMAGE
      bash -e -c "/test-ci.sh BUILD_MOZ"
    '
  - docker commit $NAME $REPO:$NAME

  # Test the build
  - 'if [[ "$log_message" == *"[run test]"* && "$log_message" == *"[$NAME]"* ]]; then
       rm -rf gjs && git clone https://github.com/GNOME/gjs.git && cd gjs;
       docker run -v $(pwd):/cwd -e DEV=$DEV -e TEST=check -e CC=gcc $REPO:$NAME bash -e -c "cd /cwd && test/test-ci.sh GJS";
     fi
    '

after_success:
  - docker tag "$REPO:$NAME" "$REPO:job-"$TRAVIS_JOB_NUMBER"_$NAME"
  - docker images
  - docker login -u $DOCKER_USER -p $DOCKER_PASS

  # Do not push, if requested
  - 'if [[ "$TRAVIS_EVENT_TYPE" == "cron" || "$log_message" != *"[dont push]"* ]]; then
       docker push $REPO;
     fi
    '

#################################################
# export TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH ; fi`
# 'if [[ $NAME == "fedora.26.gcc" ]]; then
#     docker tag $REPO:$NAME $REPO:$TAG;
#   fi'

#################################################
#sudo: required
#dist: trusty
#services:
#- docker
#
#cache:
#  directories:
#  - ".encrypted"
#
#before_install:
#  - docker pull didrocks/snapcraft
#
#script:
#  - cd $BUILD_DIR
#  #- docker run -v $HOME:/root -v $(pwd):/cwd didrocks/snapcraft sh -c 'cd /cwd; snapcraft prime'
#  #- ../snap.sh
#  - ls -la
#
#env:
#  matrix:
#    - BUILD_DIR=john-the-ripper SNAP=yes
#  global:
#    secure: rSXodPSWg4g+RJRoQfB7OJiDytn+84L5135f33RLu/kEb8K6gkcvLeXlbNZO+Epiau5WoTTMDzL4+sCsE9AHLRPWOVlwY5jNj2g9aQ8zY1sqXloPDmg4ETjci7sPsvCFNVyDhN7aSXTke3r+Ta7BFxwFW9hrH+G8mz1zYf1CmxJsJRH5EzzdKHWW0zHwXtij95np/8NQunewAp6oFz+BAEivtB6VaU+m6glSwpnJAqThS41gcLhVsgTpMVk7DL2UClT7IASC4dEohfoLDC+pQfAA1o54tL3YL8anPwl76tkU3u/2vg1c4anc/gPsaJ7orhlBn83jXGHGj49zslBXSf4LFuyNa/mWYO6SlbnMGztG2WQ4SQoFDEJa3h3kQ/q7aMbTnSuxcw3gKgEJDbGOAH8D0AaK+ztcKkKYyOYxlV710rLbkEeVGuPSgn37oJNKiydYP8aqVoGUwZpsNzenk2CVYvgqeCB/V8f7qGr3u26pQHKEcxMFuFvqfDd5whL+3DhoM39a554idE6ZZvBbcfHcZ+E4Ru8JtneJVHd5yzZbHo7pjRs6dvAwMtIv25NgfG6YkIpECMo+NQ9+ep9/jEdJvtOtc7oS1hpW6FZuDlYfq/ryGP6XI8Dw/GAwl2/hq1PPLYH6qaO2ew/xBav4xlnn+rCJSs985QtKTV/XTC4=
#################################################
