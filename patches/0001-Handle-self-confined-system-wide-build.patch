From e68502a6cf4b4086c51b14016fb1bd99af1357d2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Claudio=20Andr=C3=A9?= <claudioandre.br@gmail.com>
Date: Sun, 4 Dec 2016 19:03:06 -0200
Subject: [PATCH] Handle self confined system wide build.

---
 src/john.c     | 8 ++++----
 src/listconf.c | 7 +++++++
 src/params.h   | 4 ++--
 src/path.c     | 7 ++++++-
 4 files changed, 19 insertions(+), 7 deletions(-)

diff --git a/src/john.c b/src/john.c
index e5c7863..38635cf 100644
--- a/src/john.c
+++ b/src/john.c
@@ -446,7 +446,7 @@ static void john_omp_init(void)
 static void john_omp_fallback(char **argv) {
 	if (!getenv("JOHN_NO_OMP_FALLBACK") && john_omp_threads_new <= 1) {
 		rec_done(-2);
-#ifdef JOHN_SYSTEMWIDE_EXEC
+#if defined(JOHN_SYSTEMWIDE_EXEC) && !defined(_BOXED)
 #define OMP_FALLBACK_PATHNAME JOHN_SYSTEMWIDE_EXEC "/" OMP_FALLBACK_BINARY
 #else
 #define OMP_FALLBACK_PATHNAME path_expand("$JOHN/" OMP_FALLBACK_BINARY)
@@ -455,7 +455,7 @@ static void john_omp_fallback(char **argv) {
 		mpi_teardown();
 #endif
 		execv(OMP_FALLBACK_PATHNAME, argv);
-#ifdef JOHN_SYSTEMWIDE_EXEC
+#if defined(JOHN_SYSTEMWIDE_EXEC) && !defined(_BOXED)
 		perror("execv: " OMP_FALLBACK_PATHNAME);
 #else
 		perror("execv: $JOHN/" OMP_FALLBACK_BINARY);
@@ -1356,13 +1356,13 @@ static void CPU_detect_or_fallback(char **argv, int make_check)
 #error CPU_FALLBACK is incompatible with the current DOS and Windows code
 #endif
 		if (!make_check) {
-#ifdef JOHN_SYSTEMWIDE_EXEC
+#if defined(JOHN_SYSTEMWIDE_EXEC) && !defined(_BOXED)
 #define CPU_FALLBACK_PATHNAME JOHN_SYSTEMWIDE_EXEC "/" CPU_FALLBACK_BINARY
 #else
 #define CPU_FALLBACK_PATHNAME path_expand("$JOHN/" CPU_FALLBACK_BINARY)
 #endif
 			execv(CPU_FALLBACK_PATHNAME, argv);
-#ifdef JOHN_SYSTEMWIDE_EXEC
+#if defined(JOHN_SYSTEMWIDE_EXEC) && !defined(_BOXED)
 			perror("execv: " CPU_FALLBACK_PATHNAME);
 #else
 			perror("execv: $JOHN/" CPU_FALLBACK_BINARY);
diff --git a/src/listconf.c b/src/listconf.c
index 5add6ac..12481a7 100644
--- a/src/listconf.c
+++ b/src/listconf.c
@@ -127,10 +127,17 @@ static void listconf_list_build_info(void)
 	       SIMD_PARA_SHA256, SIMD_PARA_SHA512);
 #endif
 #if JOHN_SYSTEMWIDE
+#if defined(_BOXED)
+	puts("Environment: " "Secure and sandboxed");
+	puts("System-wide exec: " "$JOHN/");
+	puts("System-wide home: " "$JOHN/");
+	printf("Private home is %s\n", path_expand(JOHN_PRIVATE_HOME));
+#else
 	puts("System-wide exec: " JOHN_SYSTEMWIDE_EXEC);
 	puts("System-wide home: " JOHN_SYSTEMWIDE_HOME);
 	puts("Private home: " JOHN_PRIVATE_HOME);
 #endif
+#endif
 #if CPU_FALLBACK
 	puts("CPU fallback binary: " CPU_FALLBACK_BINARY);
 #endif
diff --git a/src/params.h b/src/params.h
index a29c9db..39015a8 100644
--- a/src/params.h
+++ b/src/params.h
@@ -94,10 +94,10 @@
 
 #if JOHN_SYSTEMWIDE
 #ifndef JOHN_SYSTEMWIDE_EXEC /* please refer to the notes above */
-#define JOHN_SYSTEMWIDE_EXEC		"/usr/libexec/john"
+#define JOHN_SYSTEMWIDE_EXEC		"/app/bin"
 #endif
 #ifndef JOHN_SYSTEMWIDE_HOME
-#define JOHN_SYSTEMWIDE_HOME		"/usr/share/john"
+#define JOHN_SYSTEMWIDE_HOME		"/app/bin"
 #endif
 #define JOHN_PRIVATE_HOME		"~/.john"
 #endif
diff --git a/src/path.c b/src/path.c
index af97e38..939b33d 100644
--- a/src/path.c
+++ b/src/path.c
@@ -82,7 +82,12 @@ void path_init(char **argv)
 	} else
 		fprintf(stderr, "Created directory: %s\n", private);
 #endif
-#else
+#endif
+
+#if defined(_SNAP)
+	char *pos;
+	MEM_FREE(john_home_path);
+
 	if (argv[0]) {
 		int dos=0;
 		if (!john_home_path) {
-- 
2.7.4

