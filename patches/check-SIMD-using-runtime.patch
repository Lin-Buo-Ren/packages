From ab8badc81db8d0a221ad7f0fbac8c27943e63bc2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Claudio=20Andr=C3=A9?= <claudioandre.br@gmail.com>
Date: Tue, 14 Nov 2017 23:51:34 -0200
Subject: [PATCH] maint: use runtime CPU detection in configure script

Due to isseus on VMs, it is better to reuse JtR runtime CPU detection
code inside the configure script.
---
 src/m4/jtr_x86_logic.m4 | 109 ++++++++++++++++++++++++------------------------
 src/test_SIMD.c         |  59 ++++++++++++++++++++++++++
 2 files changed, 113 insertions(+), 55 deletions(-)
 create mode 100644 src/test_SIMD.c

diff --git a/src/m4/jtr_x86_logic.m4 b/src/m4/jtr_x86_logic.m4
index 19cd4b25ee..28dd37e30a 100644
--- a/src/m4/jtr_x86_logic.m4
+++ b/src/m4/jtr_x86_logic.m4
@@ -161,40 +161,46 @@ if test "x$enable_native_tests" != xno; then
   [
   CC="$CC_BACKUP -mssse3"
   AC_MSG_CHECKING([for SSSE3])
-  AC_RUN_IFELSE(
-    [
-    AC_LANG_SOURCE(
-      [[#include <tmmintrin.h>
-        #include <stdio.h>
-        extern void exit(int);
-        int main(){__m128i t;*((long long*)&t)=1;t=_mm_shuffle_epi8(t,t);if((*(unsigned*)&t)==88)printf(".");exit(0);}]]
-    )]
-    ,[CPU_BEST_FLAGS="-mssse3"]dnl
+
+  if test "$(uname -m)" = "x86_64"; then
+    CPUID_ASM="x86-64.S"
+    CPUID_FILE="x86-64.h"
+  else
+    CPUID_ASM="x86.S"
+    CPUID_FILE="x86-any.h"
+  fi
+  
+  if test ! -f arch.h; then
+      cp $CPUID_FILE arch.h
+  fi
+  $CC -P $CPPFLAGS $CPU_BEST_FLAGS $CFLAGS $CFLAGS_EXTRA -DCPU_REQ_SSSE3 -DCPU_REQ test_SIMD.c $CPUID_ASM -o test_SIMD
+
+  AC_SUBST([SIMD_var],[$( ./test_SIMD; echo $? )])
+  AS_IF([test "x$SIMD_var" = x1],
+     [CPU_BEST_FLAGS="-mssse3"]
      [CPU_STR="SSSE3"]
      [AC_MSG_RESULT([yes])]
-    ,[CPU_NOTFOUND=1]
+    ,[CPU_NOTFOUND="1"]
      [AC_MSG_RESULT([no])]
-    )
+  )
   ]
   )
+
   AS_IF([test "x$CPU_NOTFOUND" = x0],
   [
   CC="$CC_BACKUP -msse4.1"
   AC_MSG_CHECKING([for SSE4.1])
-  AC_RUN_IFELSE(
-    [
-    AC_LANG_SOURCE(
-      [[#include <smmintrin.h>
-        #include <stdio.h>
-        extern void exit(int);
-        int main(){__m128d t;*((long long*)&t)=1;t=_mm_round_pd(t,1);if((*(long long*)&t)==88)printf(".");exit(0);}]]
-    )]
-    ,[CPU_BEST_FLAGS="-msse4.1"]dnl
+
+  $CC -P $CPPFLAGS $CPU_BEST_FLAGS $CFLAGS $CFLAGS_EXTRA -DCPU_REQ_SSE4_1 -DCPU_REQ test_SIMD.c $CPUID_ASM -o test_SIMD
+
+  AC_SUBST([SIMD_var],[$( ./test_SIMD; echo $? )])
+  AS_IF([test "x$SIMD_var" = x1],
+     [CPU_BEST_FLAGS="-msse4.1"]
      [CPU_STR="SSE4.1"]
      [AC_MSG_RESULT([yes])]
-    ,[CPU_NOTFOUND=1]
+    ,[CPU_NOTFOUND="1"]
      [AC_MSG_RESULT([no])]
-    )
+  )
   ]
   )
 
@@ -202,20 +208,17 @@ if test "x$enable_native_tests" != xno; then
   [
   CC="$CC_BACKUP -mavx"
   AC_MSG_CHECKING([for AVX])
-  AC_RUN_IFELSE(
-    [
-    AC_LANG_SOURCE(
-      [[#include <immintrin.h>
-        #include <stdio.h>
-        extern void exit(int);
-        int main(){__m256d t;*((long long*)&t)=1;t=_mm256_movedup_pd(t);if((*(long long*)&t)==88)printf(".");exit(0);}]]
-    )]
-    ,[CPU_BEST_FLAGS="-mavx"]dnl
+
+  $CC -P $CPPFLAGS $CPU_BEST_FLAGS $CFLAGS $CFLAGS_EXTRA -DCPU_REQ_AVX -DCPU_REQ test_SIMD.c $CPUID_ASM -o test_SIMD
+
+  AC_SUBST([SIMD_var],[$( ./test_SIMD; echo $? )])
+  AS_IF([test "x$SIMD_var" = x1],
+     [CPU_BEST_FLAGS="-mavx"]dnl
      [CPU_STR="AVX"]
      [AC_MSG_RESULT([yes])]
-    ,[CPU_NOTFOUND=1]
+    ,[CPU_NOTFOUND="1"]
      [AC_MSG_RESULT([no])]
-    )
+  )
   ]
   )
 
@@ -223,19 +226,17 @@ if test "x$enable_native_tests" != xno; then
   [
   CC="$CC_BACKUP -mxop"
   AC_MSG_CHECKING([for XOP])
-  AC_RUN_IFELSE(
-    [
-    AC_LANG_SOURCE(
-      [[#include <x86intrin.h>
-        #include <stdio.h>
-        extern void exit(int);
-        int main(){__m128i t;*((long long*)&t)=1;t=_mm_roti_epi32(t,5);if((*(long long*)&t)==88)printf(".");exit(0);}]]
-    )]
-    ,[CPU_BEST_FLAGS="-mxop"]dnl
+
+  $CC -P $CPPFLAGS $CPU_BEST_FLAGS $CFLAGS $CFLAGS_EXTRA -DCPU_REQ_XOP -DCPU_REQ test_SIMD.c $CPUID_ASM -o test_SIMD
+
+  AC_SUBST([SIMD_var],[$( ./test_SIMD; echo $? )])
+  AS_IF([test "x$SIMD_var" = x1],
+     [CPU_BEST_FLAGS="-mxop"]dnl
      [CPU_STR="XOP"]
      [AC_MSG_RESULT([yes])]
-    ,[AC_MSG_RESULT([no])]
-    )
+    ,
+     [AC_MSG_RESULT([no])]
+  )
   ]
   )
 
@@ -243,20 +244,18 @@ if test "x$enable_native_tests" != xno; then
   [
   CC="$CC_BACKUP -mavx2"
   AC_MSG_CHECKING([for AVX2])
-  AC_RUN_IFELSE(
-    [
-    AC_LANG_SOURCE(
-      [[#include <immintrin.h>
-        #include <stdio.h>
-        extern void exit(int);
-        int main(){__m256i t, t1;*((long long*)&t)=1;t1=t;t=_mm256_mul_epi32(t1,t);if((*(long long*)&t)==88)printf(".");exit(0);}]]
-    )]
-    ,[CPU_BEST_FLAGS="-mavx2"]dnl
+
+  $CC -P $CPPFLAGS $CPU_BEST_FLAGS $CFLAGS $CFLAGS_EXTRA -DCPU_REQ_AVX2 -DCPU_REQ test_SIMD.c $CPUID_ASM -o test_SIMD
+
+  AC_SUBST([SIMD_var],[$( ./test_SIMD; echo $? )])
+  AS_IF([test "x$SIMD_var" = x1],
+     [CPU_BEST_FLAGS="-mavx2"]dnl
      [CPU_STR="AVX2"]
      [AC_MSG_RESULT([yes])]
-    ,[CPU_NOTFOUND=1]
+    ,
+     [CPU_NOTFOUND=1]
      [AC_MSG_RESULT([no])]
-    )
+  )
   ]
   )
 
diff --git a/src/test_SIMD.c b/src/test_SIMD.c
new file mode 100644
index 0000000000..025b628469
--- /dev/null
+++ b/src/test_SIMD.c
@@ -0,0 +1,59 @@
+/*
+ * Developed by Claudio André <claudioandre.br at gmail.com> in 2017
+ *
+ * Copyright (c) 2017 Claudio André <claudioandre.br at gmail.com>
+ * This program comes with ABSOLUTELY NO WARRANTY; express or implied.
+ *
+ * This is free software, and you are welcome to redistribute it
+ * under certain conditions; as expressed here
+ * http://www.gnu.org/licenses/gpl-2.0.html
+ */
+
+/*
+ * gcc -DAC_BUILT -DCPU_REQ_AVX2 -Wall -c test_SIMD.c -o test_SIMD.o
+ * gcc -DAC_BUILT -DCPU_REQ_AVX2 -DCPU_REQ -Wall -c x86-64.S -o x86-64.o
+ * gcc test_SIMD.o x86-64.o -g -o test_SIMD
+ * ./test_SIMD; echo $?
+ *
+ */
+
+#include <stdlib.h>
+#include <stdio.h>
+
+extern int CPU_detect(void);
+extern char CPU_req_name[];
+
+// Needed (but not used) stuff
+unsigned int nt_buffer8x[4];
+unsigned int output8x[4];
+
+int main(int argc, char *argv[]) {
+
+    int result = CPU_detect();
+
+#ifdef DEBUG_SIMD
+    char *name;
+
+#if CPU_REQ_SSSE3
+    name = "SSSE3";
+#elif CPU_REQ_SSE4_1
+    name = "SSE 4.1";
+#elif CPU_REQ_AVX
+    name = "AVX"
+#elif CPU_REQ_XOP
+     name = "XOP";
+#elif CPU_REQ_AVX2
+    name = "AVX2";
+#elif CPU_REQ_AVX512F
+    name = "AVX-512F";
+#elif CPU_REQ_AVX512BW
+    name = "AVX-512BW";
+#else
+    name = "unknown";
+#endif
+
+    fprintf(stderr, "CPU %s detected (%d: %s):\n", name, result,
+            result ? "yes" : "no");
+#endif
+    exit(result);
+}
\ No newline at end of file
